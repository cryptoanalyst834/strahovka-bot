// index.js
import 'dotenv/config';
import express from 'express';
import { Telegraf } from 'telegraf';
import OpenAI     from 'openai';

// ‚îÄ‚îÄ‚îÄ 0) –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
const { TELEGRAM_TOKEN, OPENROUTER_API_KEY, DOMAIN, PORT } = process.env;
if (!TELEGRAM_TOKEN || !OPENROUTER_API_KEY || !DOMAIN) {
  console.error('‚ùå –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∑–∞–¥–∞–Ω—ã TELEGRAM_TOKEN, OPENROUTER_API_KEY –∏ DOMAIN');
  process.exit(1);
}

// ‚îÄ‚îÄ‚îÄ 1) Express-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –≤–µ–±—Ö—É–∫–∞
const app = express();
app.use(express.json()); // –ø–∞—Ä—Å–∏–Ω–≥ JSON

// –∫–æ—Ä–Ω–µ–≤–æ–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è Healthcheck
app.get('/', (_req, res) => res.send('OK'));

// ‚îÄ‚îÄ‚îÄ 2) Telegram-–±–æ—Ç –∏ OpenRouter-–∫–ª–∏–µ–Ω—Ç
const bot = new Telegraf(TELEGRAM_TOKEN);
const openai = new OpenAI({
  apiKey:  OPENROUTER_API_KEY,
  baseURL: 'https://openrouter.ai/api/v1'
});

// ‚îÄ‚îÄ‚îÄ 3) –ú–µ–Ω—é –≤–∏–¥–∂–µ—Ç–æ–≤
const services = {
  –û–°–ê–ì–û:       'https://widgets.inssmart.ru/contract/eosago?appId=‚Ä¶&secret=‚Ä¶',
  –ö–ê–°–ö–û:       'https://widgets.inssmart.ru/contract/kasko?appId=‚Ä¶&secret=‚Ä¶',
  –ò–ø–æ—Ç–µ–∫–∞:     'https://widgets.inssmart.ru/contract/mortgage?appId=‚Ä¶&secret=‚Ä¶',
  –ò–º—É—â–µ—Å—Ç–≤–æ:   'https://widgets.inssmart.ru/contract/property?appId=‚Ä¶&secret=‚Ä¶',
  –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è: 'https://widgets.inssmart.ru/contract/travel?appId=‚Ä¶&secret=‚Ä¶'
};

// ‚îÄ‚îÄ‚îÄ 4) –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–æ—Ç–∞
bot.start(ctx => {
  const keyboard = Object.keys(services).map(k => ([{ text: k }]));
  return ctx.reply(
    'üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å:',
    { reply_markup: { keyboard, resize_keyboard: true } }
  );
});

bot.on('text', async ctx => {
  const text = ctx.message.text.trim();

  if (services[text]) {
    // –µ—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É
    return ctx.replyWithHTML(
      `–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è <b>${text}</b>:`,
      { reply_markup:{ inline_keyboard:[[ { text:'‚ñ∂ –û—Ç–∫—Ä—ã—Ç—å –≤–∏–¥–∂–µ—Ç', url:services[text] } ]] } }
    );
  }

  // –∏–Ω–∞—á–µ ‚Äì –∑–∞–ø—Ä–æ—Å –≤ OpenRouter
  try {
    const resp = await openai.chat.completions.create({
      model:    'gpt-3.5-turbo',
      messages: [
        { role:'system', content:'–¢—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—é. –û—Ç–≤–µ—á–∞–π –ø–æ —Ç–µ–º–µ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–π –≤–∏–¥–∂–µ—Ç—ã.' },
        { role:'user',   content:text }
      ],
      temperature:0.7,
      max_tokens:  400
    });
    await ctx.reply(resp.choices[0].message.content.trim());
  } catch (err) {
    console.error('OpenRouter Error:', err);
    await ctx.reply('–£–ø—Å, –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –º–æ–¥–µ–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// ‚îÄ‚îÄ‚îÄ 5) Webhook endpoint
const webhookPath = '/webhook';
app.post(webhookPath, (req, res) => {
  bot.handleUpdate(req.body, res)
    .then(() => res.sendStatus(200))
    .catch(() => res.sendStatus(500));
});

// ‚îÄ‚îÄ‚îÄ 6) –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Webhook –≤ Telegram –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
(async () => {
  await bot.telegram.setWebhook(`${DOMAIN}${webhookPath}`);
  console.log('‚úÖ Webhook set to', `${DOMAIN}${webhookPath}`);
  // –∑–∞–ø—É—Å–∫–∞–µ–º HTTP-—Å–µ—Ä–≤–µ—Ä
  const port = PORT || 3000;
  app.listen(port, () => {
    console.log(`üåê Express server listening on port ${port}`);
  });
})();
